public class PercolationStats {
    private double[] results;
    private Percolation p;
    private double mean;
    private double stddev;
    private int T;

    public PercolationStats(int N, int T) {     // perform T independent experiments on an N-by-N grid
        int count;
        this.T = T;
        results = new double[T];

        StdRandom.setSeed(1);

        for (int i = 0; i < T; i++) {
            count = 0;
            p = new Percolation(N);
            while (!p.percolates()) {
                int x = StdRandom.uniform(1, N + 1);
                int y = StdRandom.uniform(1, N + 1);

                if (!p.isOpen(x, y)) {
                    count++;
                    p.open(x, y);
                }
            }
            results[i] = ((double) count) / (N * N);
        }
    }
    public double mean() {                      // sample mean of percolation threshold
        return StdStats.mean(results);
    }
    public double stddev() {                    // sample standard deviation of percolation threshold}
        return StdStats.stddev(results);
    }
    public double confidenceLo() {              // low  endpoint of 95% confidence interval
        return this.mean()-1.96*stddev()/Math.sqrt(T);
    }

    public double confidenceHi() {              // low  endpoint of 95% confidence interval
        return this.mean()+1.96*stddev()/Math.sqrt(T);
    }

    public static void main(String[] args) {    // test client (described below)
        int N = Integer.parseInt(args[0]);
        int T = Integer.parseInt(args[1]);
        // int N = 10;
        // int T = 10;
        PercolationStats stats = new PercolationStats(N, T);

        System.out.println("mean                    = " + stats.mean());
        System.out.println("stddev                  = " + stats.stddev());
        System.out.println("95% confidence interval = " + stats.confidenceLo() + ", " + stats.confidenceHi());
    }
}
